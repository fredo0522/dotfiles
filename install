#!/usr/bin/env sh

# TODO: Finish the  *.list  packages that has to be install. DO IT!

#
# Colors
#
WHITE='\033[0;37m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'

ON_BLUE='\033[44m'        # blue Background
ON_GREEN='\033[42m'       # green Background
ON_RED='\033[41m'         # red Background
ON_WHITE='\033[47m'       # white Background
BBLACK='\033[1;30m'       # Bold black
NC='\033[0m'              # No Color

#
# Helper functions
#
function progress() {
  echo -e "[.] ${ON_BLUE}${BBLACK} PROGR ${NC} $1..."
  sleep 1
}

function error() {
  echo -e "[~] ${ON_RED}${BBLACK} ERROR ${NC} $1..."
  sleep 2
}

function success() {
  echo -e "[*] ${ON_GREEN}${BBLACK} SUCCS ${NC} $1..."
  sleep 1
}

function ignoring() {
  echo -e "[.] ${ON_WHITE}${BBLACK} IGNOR ${NC} $1..."
  sleep 1
}

# TODO: Adding a flag; checking if the symbolic link is important then stop the installation
function create_link() {
  if [[ -L $2 ]]; then
    error "The content of $2 is going to be change"
    read -r -p "Do you want to remove the symbolic link? [y/n] " remove_it
    if [[ "$remove_it" == "y" ]]; then
      progress "Unlinking file: $2"
      unlink $2
      progress "Symbolic link $2 deleted"
    else
      ignoring "Ignoring link file $2"
      error "The installation can't continue without the symbolic link for $1"
      exit 1
    fi
  else
    make_backup $2
  fi
  progress "Creating symbolic link for in $2"
  ln -sf $1 $2
}

# Making backup of the file/folder if it exist
function make_backup() {
  if [[ -d $1 ]]; then
    progress "Making backup of folder: $1"
    mv $1 "$1.bak"
  elif [[ -e $1 ]]; then
    progress "Making backup of file: $1"
    mv $1 "$1.bak"
  else
    ignoring "No file/folder: $1 to backup"
  fi
}

#
# Installers
#
function install_bspwm() {
  # echo "Installing i3 dependencies..."
  # ./packages/installer.sh bspwm

  progress "Creating necessary folders"
  mkdir -p ~/.config/dunst ~/.config/bspwm ~/.config/sxhkd ~/.config/picom

  progress "Creating symbolic links for bspwm config files"
  create_link "$(pwd)/config/bspwm/bspwmrc" "$HOME/.config/bspwm/bspwmrc"
  create_link "$(pwd)/config/sxhkd/sxhkdrc" "$HOME/.config/sxhkd/sxhkdrc"
  create_link "$(pwd)/config/rofi" "$HOME/.config/rofi"
  create_link "$(pwd)/config/polybar" "$HOME/.config/polybar"
  create_link "$(pwd)/config/picom/picom.conf" "$HOME/.config/picom/picom.conf"
  create_link "$(pwd)/config/dunstrc" "$HOME/.config/dunst/dunstrc"

  success "Bspwm config installed"
}

function install_i3(){
  # echo "Installing i3 dependencies..."
  # ./packages/installer.sh i3

  progress "Creating necessary folders"
  mkdir -p ~/.config/i3status ~/.i3 ~/.config/dunst ~/.config/picom

  progress "Creating symbolic links for i3 and polybar..."
  create_link "$(pwd)/config/i3/config" "$HOME/.i3/config"
  create_link "$(pwd)/config/betterlockscreenrc" "$HOME/.config/betterlockscreenrc"
  create_link "$(pwd)/config/dunstrc" "$HOME/.config/dunst/dunstrc"
  create_link "$(pwd)/config/rofi" "$HOME/.config/rofi"
  create_link "$(pwd)/config/polybar" "$HOME/.config/polybar"
  create_link "$(pwd)/config/i3/i3status.conf" "$HOME/.config/i3status/config"
  create_link "$(pwd)/config/polybar" "$HOME/.config/polybar"
  create_link "$(pwd)/config/picom/picom.conf" "$HOME/.config/picom/picom.conf"

  success "i3 config installed"
}

function install_neovim(){
  # echo "Installing i3 dependencies..."
  # ./packages/installer.sh nvim

  progress "Creating symbolic links for Neovim"
  create_link "$(pwd)/config/nvim" "$HOME/.config/nvim"

  progress "Installing and updating neovim packages/plugins"
  nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

  success "NeoVim config installed"
}

function install_term(){
  # echo "Installling terminal dependencies..."
  # ./packages/installer.sh term

  progress "Creating folders need it"
  mkdir -p "$HOME"/.local/share/fonts

  progress "User profile configurations"
  create_link "$(pwd)/misc/Xresources" "$HOME/.Xresources"
  create_link "$(pwd)/misc/profile" "$HOME/.profile"

  progress "Installing fonts..."
  cp -r "$(pwd)"/fonts/* "$HOME"/.local/share/fonts

  if command -v tmux &> /dev/null
  then
    progress "Creating symbolic link for .tmux.conf"
    create_link "$(pwd)/config/tmux.conf" "$HOME/.tmux.conf"
  else
    ignoring "Ignoring tmux configuration, not installed on the system"
  fi

  read -r -p "Which terminal config do you want to install? [(a)lacritty/(k)itty/(n)either]" opt_terminal

  if [[ "$opt_terminal" == "a" ]]; then
    progress "Creating symbolic links for alacritty configuration"
    create_link "$(pwd)/config/alacritty" "$HOME/.config/alacritty"
  elif [[ "$opt_terminal" == "k" ]]; then
    progress "Creating symbolic links for kitty configuration"
    create_link "$(pwd)/config/kitty/" "$HOME/.config/kitty"
  else
    ignoring "Ignore Terminal installation of config files"
  fi

  progress "Updating font cache"
  fc-cache -f -v

  success "Terminal config installed"
}

function install_zsh(){
  install_term

  progress "Creating symbolic links for zsh config files"
  create_link "$(pwd)/config/zsh" "$HOME/.config/zsh"

  progress "Creating symbolic link for .zshenv"
  create_link "$(pwd)/config/zsh/zshenv" "$HOME/.zshenv"

  progress "Updating submodules for zsh plugins"
  git submodule init
  git submodule update

  success "Zsh config installed"
}

function install_latex(){
  # echo "Installing Latex dependencies..."
  # ./packages/installer.sh latex

  progress "Creating folders need it"
  mkdir -p ~/.config/zathura

  progress "Creating symbolic links for latex"
  create_link "$(pwd)/config/zathura/zathurarc" "$HOME/.config/zathura/zathurarc"

  success "Latex config installed"
}

function help_tag(){
  echo "Options for the installation:"
  echo "      --i3       Install config files for i3."
  echo "      --bspwm    Install config files for bspwm including sxhkd."
  echo "      --nvim     Install config files for nvim."
  echo "      --latex    Install config files for latex."
  echo "      --zsh      Install config files for zsh."
  echo "      --all      To install all the config files."
  echo "More information about the files on the README."
}

# Checking parameters (flags) given to the script
if [[ ! $# -eq 0 ]]
then
  while [ ! $# -eq 0 ]
  do
    case "$1" in
      --help | -h)
        help_tag
        ;;
      --i3)
        install_i3
        ;;
      --bspwm)
        install_bspwm
        ;;
      --nvim)
        install_neovim
        ;;
      --latex)
        install_latex
        ;;
      --zsh)
        install_zsh
        ;;
      --all)
        install_i3
        install_zsh
        install_neovim
        install_latex
        ;;
      *) error "Choose a valid option, see options with --help or -h flags.";;
    esac
    shift
  done
else
  error "Choose which config files you want to install, see the list with -h or --help flags."
fi
