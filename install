#!/bin/bash

# TODO: Finish the  *.list  packages that has to be install. DO IT!
WHITE='\033[0;37m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'

ON_BLUE='\033[44m'        # Blue Background
ON_GREEN='\033[42m'       # Green Background
ON_RED='\033[41m'         # Red Background
ON_WHITE='\033[47m'       # White Background
BBLACK='\033[1;30m'       # Bold Black
NC='\033[0m'              # No Color

function progress() {
  echo -e "[.] ${ON_BLUE}${BBLACK} PROGR ${NC} $1..."
  sleep 1
}

function error() {
  echo -e "[~] ${ON_RED}${BBLACK} ERROR ${NC} $1..."
  sleep 2
}

function success() {
  echo -e "[*] ${ON_GREEN}${BBLACK} SUCCS ${NC} $1..."
  sleep 1
}

function ignoring() {
  echo -e "[.] ${ON_WHITE}${BBLACK} IGNOR ${NC} $1..."
  sleep 1
}

# Checking if it is a soft link
function check_link_file() {
  if [[ -L $1 ]]; then
    error "Se va a cambiar los contenidos del $1 pero es un symbolic link"
    read -r -p "Do you want to remove the symbolic link? [y/n] " remove_it
    if [[ "$remove_it" == "y" ]]; then
      progress "Unlinking file: $1"
      unlink $1
      progress "Symbolic link $1 deleted"
      return_val="DELETED"
    else
      ignoring "Ignoring link file $1"
      return_val="NOT DELETED"
    fi
  else
    return_val="NO LINK"
  fi
}

function make_backup() {
  if [[ -d $1 ]]; then
    progress "Making backup of folder: $1"
    mv $1 "$1.bak"
  elif [[ -e $1 ]]; then
    progress "Making backup of file: $1"
    mv $1 "$1.bak"
  else
    progress "No file to backup"
  fi
}

function install_vim(){
  # echo "Installing Vim dependencies..."
  # ./packages/installer.sh vim

  echo "Creating necessary folders..."
  mkdir -p ~/.vim/tmp/backup ~/.vim/tmp/swap ~/.vim/tmp/view

  echo "Creating symbolic links for vim..."
  ln -sf "$(pwd)"/vim/vimrc ~/.vimrc
  ln -sf "$(pwd)"/vim/plugin ~/.vim/
  ln -sf "$(pwd)"/vim/coc-settings.json ~/.vim/coc-settings.json

  echo "Installing vim-plug and plugins..."
  # Installing vim-plug package manager for Vim
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  # Installing/Updating vim plugins
  vim +PlugInstall +PlugUpdate +qall

  echo "DONE - Vim installation."
}

function install_bspwm() {
  progress "Creating necessary folders"
  mkdir -p ~/.config/dunst ~/.config/bspwm ~/.config/sxhkd ~/.config/picom

  progress "Creating symbolic links for bspwm config files"
  ln -sf "$(pwd)"/config/bspwm/bspwmrc ~/.config/bspwm/bspwmrc
  ln -sf "$(pwd)"/config/sxhkd/sxhkdrc ~/.config/sxhkd/sxhkdrc
  ln -sf "$(pwd)"/config/rofi ~/.config/
  ln -sf "$(pwd)"/config/polybar ~/.config/
  ln -sf "$(pwd)"/config/picom/picom.conf ~/.config/picom/picom.conf
  ln -sf "$(pwd)"/config/dunstrc ~/.config/dunst/dunstrc
  # ln -sf "$(pwd)"/config/ranger ~/.config/

  success "Finish installing bspwm config"
}

function install_i3(){
  # echo "Installing i3 dependencies..."
  # ./packages/installer.sh i3

  echo "Creating necessary folders..."
  mkdir -p ~/.config/i3status ~/.i3

  echo "Creating symbolic links for i3 and polybar..."
  ln -sf "$(pwd)"/config/i3/config ~/.i3/config
  ln -sf "$(pwd)"/config/betterlockscreenrc ~/.config/betterlockscreenrc
  ln -sf "$(pwd)"/config/ranger ~/.config/
  ln -sf "$(pwd)"/config/dunstrc ~/.config/dunst/dunstrc
  ln -sf "$(pwd)"/config/rofi ~/.config/
  ln -sf "$(pwd)"/config/i3/i3status.conf ~/.config/i3status/config
  ln -sf "$(pwd)"/config/polybar ~/.config/

  echo "DONE - i3 installation."
}

function install_neovim(){
  progress "Installing packer.nvim"
  git clone --depth 1 https://github.com/wbthomason/packer.nvim\
    ~/.local/share/nvim/site/pack/packer/start/packer.nvim

  progress "Creating symbolic links for Neovim..."

  # TODO: Podemos automatizar este condicional, ya que siempre lo tengo que hacer
  check_link_file "$HOME/.config/nvim"
  if [[ "$return_val" == "DELTED" ]]; then
    ln -s `pwd`/config/nvim $HOME/.config/nvim
  elif [[ "$return_val" == "NOT LINK" ]]; then
    make_backup "$HOME/.config/nvim"
  else
    error "Can't continue without the symbolic link file"
    return
  fi

  progress "Installing and updating neovim packages"
  nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

  success "NeoVim config was install"
}

function install_term(){
  # echo "Installling terminal dependencies..."
  # ./packages/installer.sh term

  progress "Creating folders need it..."
  mkdir -p "$HOME"/.local/share/fonts

  progress "Installing fonts..."
  cp -r "$(pwd)"/fonts/* "$HOME"/.local/share/fonts

  progress "Creating symbolic links Bash aliases"
  make_backup "$HOME/.bash_aliases"
  ln -sf "$(pwd)"/bash/bash_aliases "$HOME"/.bash_aliases

  if command -v tmux &> /dev/null
  then
    progress "Creating symbolic link for .tmux.conf"
    make_backup "$HOME/.tmux.conf"
    ln -sf "$(pwd)"/config/tmux.conf "$HOME"/.tmux.conf
  fi

  read -r -p "Which terminal config do you want to install? [(a)lacritty/(k)itty/(n)either]" opt_terminal

  if [[ "$opt_terminal" == "a" ]]; then
    progress "Creating symbolic links for alacritty configuration..."
    make_backup "$HOME/.config/alacritty"
    ln -sf "$(pwd)"/config/alacritty "$HOME"/.config/alacritty
  elif [[ "$opt_terminal" == "k" ]]; then
    progress "Creating symbolic links for kitty configuration..."
    make_backup "$HOME/.config/kitty"
    ln -sf "$(pwd)"/config/kitty/ "$HOME"/.config/kitty
  fi

  if command -v ag &> /dev/null
  then
    progress "Creating symbolic links for ag (silver searcher) ..."
    make_backup "$HOME/.agignore"
    ln -sf "$(pwd)"/bash/agignore ~/.agignore
  fi

  progress "Updating font cache"
  fc-cache -f -v
  clear

  success "Terminal installation."
}

function install_bash(){
  install_term

  echo "Creating symbolic links for bash..."
  ln -sf "$(pwd)"/bash/Xresources ~/.Xresources
  ln -sf "$(pwd)"/bash/bashrc ~/.bashrc
  ln -sf "$(pwd)"/bash/profile ~/.profile
}

function install_zsh(){
  install_term

  echo "Installing Oh-My-Zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

  echo "Installing zsh-autosuggestions..."
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

  echo "Creating symbolic links for zsh..."
  ln -sf "$(pwd)"/zsh/fredo.zsh-theme ~/.oh-my-zsh/custom/themes/fredo.zsh-theme
  ln -sf "$(pwd)"/zsh/zshrc ~/.zshrc
}

function install_latex(){
  # echo "Installing Latex dependencies..."
  # ./packages/installer.sh latex

  echo "Creating folders need it..."
  mkdir -p ~/.config/zathura

  echo "Creating symbolic links for latex..."
  ln -sf "$(pwd)"/config/zathura/zathurarc ~/.config/zathura/zathurarc
  ln -sf "$(pwd)"/config/latexmkrc ~/.latexmkrc

  echo "DONE - Latex installation."
}

function help_tag(){
  echo "Options for the installation:"
  echo "      --i3       Install config files for i3."
  echo "      --vim      Install config files for vim."
  echo "      --nvim     Install config files for nvim."
  echo "      --latex    Install config files for latex."
  echo "      --zsh      Install config files for zsh."
  echo "      --bash     Install config files for bash."
  echo "      --all      To install all the config files."
  echo "More information about the files on the README."
}

if [[ ! $# -eq 0 ]]
then
  while [ ! $# -eq 0 ]
  do
    case "$1" in
      --help | -h)
        help_tag
        ;;
      --i3)
        install_i3
        ;;
      --bspwm)
        install_bspwm
        ;;
      --vim)
        install_vim
        ;;
      --nvim)
        install_neovim
        ;;
      --latex)
        install_latex
        ;;
      --zsh)
        install_zsh
        ;;
      --bash)
        install_bash
        ;;
      --all)
        install_i3
        install_zsh
        install_bash
        install_vim
        install_neovim
        install_latex
        ;;
      *) echo "Choose a valid option, see options with --help or -h flags.";;
    esac
    shift
  done
else
  echo "Choose which config files you want to install, see the list with -h or --help flags."
fi

